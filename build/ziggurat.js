// Generated by CoffeeScript 2.7.0
// contains all core logic (templates) as well as query
// note: requires imperative HTML to work
var zg;

if (typeof HTML === "undefined" || HTML === null) {
  throw new Error("can't find HTML. did you forget to import imperative-html?");
}

zg = {};

// functions

// query
zg.query = function(selector) {
  var result;
  result = document.querySelectorAll(selector);
  if (result.length === 1) {
    return result[0];
  } else {
    return result;
  }
};

zg.queryone = function(selector) {
  return document.querySelector(selector);
};

zg.queryall = function(selector) {
  return document.querySelectorAll(selector);
};

// misc
zg.deepfind = function(data, path) {
  var i, index, len, node, ref;
  path = path.trim();
  ref = (function() {
    var j, len, ref, results;
    ref = path.split('.');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      if (node !== "") {
        results.push(node);
      }
    }
    return results;
  })();
  for (i = 0, len = ref.length; i < len; i++) {
    index = ref[i];
    data = data[index];
    if (data == null) {
      throw new Error(`'${path}' not in data '${data}'`);
    }
  }
  return data;
};

// template creation
zg.create = function(name, data) {
  var build, template;
  template = zg.queryone("zg-template#" + name);
  if (template == null) {
    throw new TypeError('no such template with name ' + name);
  }
  build = function(div, data) {
    var child, elements, i, len, new_elements, ref;
    elements = div.cloneNode(true);
    new_elements = [];
    // does the element have children?
    if (elements.children != null) {
      ref = elements.children;
      // compile every child
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        // depending on tag, replace with something
        if (child.tagName != null) {
          switch (child.tagName.toLowerCase()) {
            case "zg-var":
              child = document.createTextNode(zg.deepfind(data, child.innerHTML));
          }
        }
        // if the child has children, build the child
        if (child.children != null) {
          child.replaceChildren(...(build(child, data)));
        }
        new_elements.push(child);
      }
    } else {
      new_elements = elements.childNodes;
    }
    return new_elements;
  };
  return HTML.div(build(template, data));
};
// Generated by CoffeeScript 2.7.0
if (typeof zg === "undefined" || zg === null) {
  throw new Error("cannot find zg. did you forget to import zg-core first?");
}

window.addEventListener("load", function() {
  var element, fn_name, i, len, ref, results;
  ref = zg.queryall('form[zg-submit]');
  results = [];
  for (i = 0, len = ref.length; i < len; i++) {
    element = ref[i];
    fn_name = element.getAttribute("zg-submit");
    results.push(element.onsubmit = function(event) {
      var data, e;
      data = {};
      // for each entry in the form,
      // add a reference to it in data
      (new FormData(element)).forEach(function(_, k) {
        return Object.defineProperty(data, k, {
          get: function() {
            return element[k].value;
          },
          set: function(v) {
            return element[k].value = v;
          }
        });
      });
      try {
        
        // fuck around and find out
        window[fn_name](data);
      } catch (error) {
        e = error;
        console.error(e);
      }
      
      // prevent event default
      event.preventDefault;
      return false;
    });
  }
  return results;
});
// Generated by CoffeeScript 2.7.0
if (typeof zg === "undefined" || zg === null) {
  throw new Error("cannot find zg. did you forget to import zg-core first?");
}

zg.mirror = class {
  constructor(name, _value) {
    this.name = name;
    Object.defineProperty(this, "v", {
      get: function() {
        return this._value;
      },
      set: function(val) {
        var bind, i, len, ref, results;
        // when V is set, also update the bound valus in HTML
        this._value = val;
        ref = zg.queryall(`zg-bind[name=${this.name}]`);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          bind = ref[i];
          results.push(bind.innerText = this._value);
        }
        return results;
      }
    });
    // also call the setter
    this.v = _value;
  }

};
