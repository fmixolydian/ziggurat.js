// Generated by CoffeeScript 2.7.0
// contains all core logic (templates) as well as query
// note: requires imperative HTML to work
var zg;

if (typeof HTML === "undefined" || HTML === null) {
  throw new Error("can't find HTML. did you forget to import imperative-html?");
}

zg = {};

// functions

// query
zg.query = function(selector) {
  var result;
  result = document.querySelectorAll(selector);
  if (result.length === 1) {
    return result[0];
  } else {
    return result;
  }
};

zg.queryone = function(selector) {
  return document.querySelector(selector);
};

zg.queryall = function(selector) {
  return document.querySelectorAll(selector);
};

// misc
zg.deepfind = function(data, path) {
  var i, index, len, node, ref;
  path = path.trim();
  ref = (function() {
    var j, len, ref, results;
    ref = path.split('.');
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      node = ref[j];
      if (node !== "") {
        results.push(node);
      }
    }
    return results;
  })();
  for (i = 0, len = ref.length; i < len; i++) {
    index = ref[i];
    data = data[index];
    if (data == null) {
      throw new Error(`'${path}' not in data '${data}'`);
    }
  }
  return data;
};

// template creation
zg.create = function(name, data) {
  var build, template;
  template = zg.queryone("zg-template#" + name);
  if (template == null) {
    throw new TypeError('no such template with name ' + name);
  }
  build = function(div, data) {
    var child, elements, i, len, new_elements, ref;
    elements = div.cloneNode(true);
    new_elements = [];
    // does the element have children?
    if (elements.children != null) {
      ref = elements.children;
      // compile every child
      for (i = 0, len = ref.length; i < len; i++) {
        child = ref[i];
        // depending on tag, replace with something
        if (child.tagName != null) {
          switch (child.tagName.toLowerCase()) {
            case "zg-var":
              child = document.createTextNode(zg.deepfind(data, child.innerHTML));
          }
        }
        // if the child has children, build the child
        if (child.children != null) {
          child.replaceChildren(...(build(child, data)));
        }
        new_elements.push(child);
      }
    } else {
      new_elements = elements.childNodes;
    }
    return new_elements;
  };
  return HTML.div(build(template, data));
};
